// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/loginrecord"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LoginRecord is the model entity for the LoginRecord schema.
type LoginRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Browser holds the value of the "browser" field.
	Browser string `json:"browser,omitempty"`
	// BrowserVer holds the value of the "browser_ver" field.
	BrowserVer string `json:"browser_ver,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// CountryCode holds the value of the "country_code" field.
	CountryCode string `json:"country_code,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Asp holds the value of the "asp" field.
	Asp string `json:"asp,omitempty"`
	// IsMobile holds the value of the "is_mobile" field.
	IsMobile bool `json:"is_mobile,omitempty"`
	// IsSuccess holds the value of the "is_success" field.
	IsSuccess bool `json:"is_success,omitempty"`
	// ErrMessage holds the value of the "err_message" field.
	ErrMessage string `json:"err_message,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoginRecordQuery when eager-loading is set.
	Edges              LoginRecordEdges `json:"edges"`
	user_login_records *int64
	selectValues       sql.SelectValues
}

// LoginRecordEdges holds the relations/edges for other nodes in the graph.
type LoginRecordEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LoginRecordEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoginRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loginrecord.FieldIsMobile, loginrecord.FieldIsSuccess:
			values[i] = new(sql.NullBool)
		case loginrecord.FieldID:
			values[i] = new(sql.NullInt64)
		case loginrecord.FieldBrowser, loginrecord.FieldBrowserVer, loginrecord.FieldIP, loginrecord.FieldOs, loginrecord.FieldPlatform, loginrecord.FieldCountry, loginrecord.FieldCountryCode, loginrecord.FieldCity, loginrecord.FieldAsp, loginrecord.FieldErrMessage:
			values[i] = new(sql.NullString)
		case loginrecord.FieldCreatedAt, loginrecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case loginrecord.ForeignKeys[0]: // user_login_records
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoginRecord fields.
func (lr *LoginRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loginrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lr.ID = int64(value.Int64)
		case loginrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lr.CreatedAt = value.Time
			}
		case loginrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lr.UpdatedAt = value.Time
			}
		case loginrecord.FieldBrowser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser", values[i])
			} else if value.Valid {
				lr.Browser = value.String
			}
		case loginrecord.FieldBrowserVer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser_ver", values[i])
			} else if value.Valid {
				lr.BrowserVer = value.String
			}
		case loginrecord.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				lr.IP = value.String
			}
		case loginrecord.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				lr.Os = value.String
			}
		case loginrecord.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				lr.Platform = value.String
			}
		case loginrecord.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				lr.Country = value.String
			}
		case loginrecord.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				lr.CountryCode = value.String
			}
		case loginrecord.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				lr.City = value.String
			}
		case loginrecord.FieldAsp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asp", values[i])
			} else if value.Valid {
				lr.Asp = value.String
			}
		case loginrecord.FieldIsMobile:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_mobile", values[i])
			} else if value.Valid {
				lr.IsMobile = value.Bool
			}
		case loginrecord.FieldIsSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_success", values[i])
			} else if value.Valid {
				lr.IsSuccess = value.Bool
			}
		case loginrecord.FieldErrMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field err_message", values[i])
			} else if value.Valid {
				lr.ErrMessage = value.String
			}
		case loginrecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_login_records", value)
			} else if value.Valid {
				lr.user_login_records = new(int64)
				*lr.user_login_records = int64(value.Int64)
			}
		default:
			lr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoginRecord.
// This includes values selected through modifiers, order, etc.
func (lr *LoginRecord) Value(name string) (ent.Value, error) {
	return lr.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the LoginRecord entity.
func (lr *LoginRecord) QueryUsers() *UserQuery {
	return NewLoginRecordClient(lr.config).QueryUsers(lr)
}

// Update returns a builder for updating this LoginRecord.
// Note that you need to call LoginRecord.Unwrap() before calling this method if this LoginRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *LoginRecord) Update() *LoginRecordUpdateOne {
	return NewLoginRecordClient(lr.config).UpdateOne(lr)
}

// Unwrap unwraps the LoginRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *LoginRecord) Unwrap() *LoginRecord {
	_tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoginRecord is not a transactional entity")
	}
	lr.config.driver = _tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *LoginRecord) String() string {
	var builder strings.Builder
	builder.WriteString("LoginRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(lr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("browser=")
	builder.WriteString(lr.Browser)
	builder.WriteString(", ")
	builder.WriteString("browser_ver=")
	builder.WriteString(lr.BrowserVer)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(lr.IP)
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(lr.Os)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(lr.Platform)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(lr.Country)
	builder.WriteString(", ")
	builder.WriteString("country_code=")
	builder.WriteString(lr.CountryCode)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(lr.City)
	builder.WriteString(", ")
	builder.WriteString("asp=")
	builder.WriteString(lr.Asp)
	builder.WriteString(", ")
	builder.WriteString("is_mobile=")
	builder.WriteString(fmt.Sprintf("%v", lr.IsMobile))
	builder.WriteString(", ")
	builder.WriteString("is_success=")
	builder.WriteString(fmt.Sprintf("%v", lr.IsSuccess))
	builder.WriteString(", ")
	builder.WriteString("err_message=")
	builder.WriteString(lr.ErrMessage)
	builder.WriteByte(')')
	return builder.String()
}

// LoginRecords is a parsable slice of LoginRecord.
type LoginRecords []*LoginRecord
