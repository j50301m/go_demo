// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/loginrecord"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginRecordCreate is the builder for creating a LoginRecord entity.
type LoginRecordCreate struct {
	config
	mutation *LoginRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (lrc *LoginRecordCreate) SetCreatedAt(t time.Time) *LoginRecordCreate {
	lrc.mutation.SetCreatedAt(t)
	return lrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableCreatedAt(t *time.Time) *LoginRecordCreate {
	if t != nil {
		lrc.SetCreatedAt(*t)
	}
	return lrc
}

// SetUpdatedAt sets the "updated_at" field.
func (lrc *LoginRecordCreate) SetUpdatedAt(t time.Time) *LoginRecordCreate {
	lrc.mutation.SetUpdatedAt(t)
	return lrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableUpdatedAt(t *time.Time) *LoginRecordCreate {
	if t != nil {
		lrc.SetUpdatedAt(*t)
	}
	return lrc
}

// SetBrowser sets the "browser" field.
func (lrc *LoginRecordCreate) SetBrowser(s string) *LoginRecordCreate {
	lrc.mutation.SetBrowser(s)
	return lrc
}

// SetBrowserVer sets the "browser_ver" field.
func (lrc *LoginRecordCreate) SetBrowserVer(s string) *LoginRecordCreate {
	lrc.mutation.SetBrowserVer(s)
	return lrc
}

// SetIP sets the "ip" field.
func (lrc *LoginRecordCreate) SetIP(s string) *LoginRecordCreate {
	lrc.mutation.SetIP(s)
	return lrc
}

// SetOs sets the "os" field.
func (lrc *LoginRecordCreate) SetOs(s string) *LoginRecordCreate {
	lrc.mutation.SetOs(s)
	return lrc
}

// SetPlatform sets the "platform" field.
func (lrc *LoginRecordCreate) SetPlatform(s string) *LoginRecordCreate {
	lrc.mutation.SetPlatform(s)
	return lrc
}

// SetCountry sets the "country" field.
func (lrc *LoginRecordCreate) SetCountry(s string) *LoginRecordCreate {
	lrc.mutation.SetCountry(s)
	return lrc
}

// SetCountryCode sets the "country_code" field.
func (lrc *LoginRecordCreate) SetCountryCode(s string) *LoginRecordCreate {
	lrc.mutation.SetCountryCode(s)
	return lrc
}

// SetCity sets the "city" field.
func (lrc *LoginRecordCreate) SetCity(s string) *LoginRecordCreate {
	lrc.mutation.SetCity(s)
	return lrc
}

// SetAsp sets the "asp" field.
func (lrc *LoginRecordCreate) SetAsp(s string) *LoginRecordCreate {
	lrc.mutation.SetAsp(s)
	return lrc
}

// SetIsMobile sets the "is_mobile" field.
func (lrc *LoginRecordCreate) SetIsMobile(b bool) *LoginRecordCreate {
	lrc.mutation.SetIsMobile(b)
	return lrc
}

// SetIsSuccess sets the "is_success" field.
func (lrc *LoginRecordCreate) SetIsSuccess(b bool) *LoginRecordCreate {
	lrc.mutation.SetIsSuccess(b)
	return lrc
}

// SetErrMessage sets the "err_message" field.
func (lrc *LoginRecordCreate) SetErrMessage(s string) *LoginRecordCreate {
	lrc.mutation.SetErrMessage(s)
	return lrc
}

// SetID sets the "id" field.
func (lrc *LoginRecordCreate) SetID(i int64) *LoginRecordCreate {
	lrc.mutation.SetID(i)
	return lrc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (lrc *LoginRecordCreate) SetUsersID(id int64) *LoginRecordCreate {
	lrc.mutation.SetUsersID(id)
	return lrc
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (lrc *LoginRecordCreate) SetNillableUsersID(id *int64) *LoginRecordCreate {
	if id != nil {
		lrc = lrc.SetUsersID(*id)
	}
	return lrc
}

// SetUsers sets the "users" edge to the User entity.
func (lrc *LoginRecordCreate) SetUsers(u *User) *LoginRecordCreate {
	return lrc.SetUsersID(u.ID)
}

// Mutation returns the LoginRecordMutation object of the builder.
func (lrc *LoginRecordCreate) Mutation() *LoginRecordMutation {
	return lrc.mutation
}

// Save creates the LoginRecord in the database.
func (lrc *LoginRecordCreate) Save(ctx context.Context) (*LoginRecord, error) {
	lrc.defaults()
	return withHooks(ctx, lrc.sqlSave, lrc.mutation, lrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lrc *LoginRecordCreate) SaveX(ctx context.Context) *LoginRecord {
	v, err := lrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrc *LoginRecordCreate) Exec(ctx context.Context) error {
	_, err := lrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrc *LoginRecordCreate) ExecX(ctx context.Context) {
	if err := lrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrc *LoginRecordCreate) defaults() {
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		v := loginrecord.DefaultCreatedAt()
		lrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		v := loginrecord.DefaultUpdatedAt()
		lrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrc *LoginRecordCreate) check() error {
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LoginRecord.created_at"`)}
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LoginRecord.updated_at"`)}
	}
	if _, ok := lrc.mutation.Browser(); !ok {
		return &ValidationError{Name: "browser", err: errors.New(`ent: missing required field "LoginRecord.browser"`)}
	}
	if _, ok := lrc.mutation.BrowserVer(); !ok {
		return &ValidationError{Name: "browser_ver", err: errors.New(`ent: missing required field "LoginRecord.browser_ver"`)}
	}
	if _, ok := lrc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "LoginRecord.ip"`)}
	}
	if _, ok := lrc.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`ent: missing required field "LoginRecord.os"`)}
	}
	if _, ok := lrc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "LoginRecord.platform"`)}
	}
	if _, ok := lrc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "LoginRecord.country"`)}
	}
	if _, ok := lrc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`ent: missing required field "LoginRecord.country_code"`)}
	}
	if _, ok := lrc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "LoginRecord.city"`)}
	}
	if _, ok := lrc.mutation.Asp(); !ok {
		return &ValidationError{Name: "asp", err: errors.New(`ent: missing required field "LoginRecord.asp"`)}
	}
	if _, ok := lrc.mutation.IsMobile(); !ok {
		return &ValidationError{Name: "is_mobile", err: errors.New(`ent: missing required field "LoginRecord.is_mobile"`)}
	}
	if _, ok := lrc.mutation.IsSuccess(); !ok {
		return &ValidationError{Name: "is_success", err: errors.New(`ent: missing required field "LoginRecord.is_success"`)}
	}
	if _, ok := lrc.mutation.ErrMessage(); !ok {
		return &ValidationError{Name: "err_message", err: errors.New(`ent: missing required field "LoginRecord.err_message"`)}
	}
	return nil
}

func (lrc *LoginRecordCreate) sqlSave(ctx context.Context) (*LoginRecord, error) {
	if err := lrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lrc.mutation.id = &_node.ID
	lrc.mutation.done = true
	return _node, nil
}

func (lrc *LoginRecordCreate) createSpec() (*LoginRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginRecord{config: lrc.config}
		_spec = sqlgraph.NewCreateSpec(loginrecord.Table, sqlgraph.NewFieldSpec(loginrecord.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = lrc.conflict
	if id, ok := lrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lrc.mutation.CreatedAt(); ok {
		_spec.SetField(loginrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lrc.mutation.UpdatedAt(); ok {
		_spec.SetField(loginrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lrc.mutation.Browser(); ok {
		_spec.SetField(loginrecord.FieldBrowser, field.TypeString, value)
		_node.Browser = value
	}
	if value, ok := lrc.mutation.BrowserVer(); ok {
		_spec.SetField(loginrecord.FieldBrowserVer, field.TypeString, value)
		_node.BrowserVer = value
	}
	if value, ok := lrc.mutation.IP(); ok {
		_spec.SetField(loginrecord.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := lrc.mutation.Os(); ok {
		_spec.SetField(loginrecord.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := lrc.mutation.Platform(); ok {
		_spec.SetField(loginrecord.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := lrc.mutation.Country(); ok {
		_spec.SetField(loginrecord.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := lrc.mutation.CountryCode(); ok {
		_spec.SetField(loginrecord.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := lrc.mutation.City(); ok {
		_spec.SetField(loginrecord.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := lrc.mutation.Asp(); ok {
		_spec.SetField(loginrecord.FieldAsp, field.TypeString, value)
		_node.Asp = value
	}
	if value, ok := lrc.mutation.IsMobile(); ok {
		_spec.SetField(loginrecord.FieldIsMobile, field.TypeBool, value)
		_node.IsMobile = value
	}
	if value, ok := lrc.mutation.IsSuccess(); ok {
		_spec.SetField(loginrecord.FieldIsSuccess, field.TypeBool, value)
		_node.IsSuccess = value
	}
	if value, ok := lrc.mutation.ErrMessage(); ok {
		_spec.SetField(loginrecord.FieldErrMessage, field.TypeString, value)
		_node.ErrMessage = value
	}
	if nodes := lrc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UsersTable,
			Columns: []string{loginrecord.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_login_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginRecord.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginRecordUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (lrc *LoginRecordCreate) OnConflict(opts ...sql.ConflictOption) *LoginRecordUpsertOne {
	lrc.conflict = opts
	return &LoginRecordUpsertOne{
		create: lrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lrc *LoginRecordCreate) OnConflictColumns(columns ...string) *LoginRecordUpsertOne {
	lrc.conflict = append(lrc.conflict, sql.ConflictColumns(columns...))
	return &LoginRecordUpsertOne{
		create: lrc,
	}
}

type (
	// LoginRecordUpsertOne is the builder for "upsert"-ing
	//  one LoginRecord node.
	LoginRecordUpsertOne struct {
		create *LoginRecordCreate
	}

	// LoginRecordUpsert is the "OnConflict" setter.
	LoginRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *LoginRecordUpsert) SetUpdatedAt(v time.Time) *LoginRecordUpsert {
	u.Set(loginrecord.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateUpdatedAt() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldUpdatedAt)
	return u
}

// SetBrowser sets the "browser" field.
func (u *LoginRecordUpsert) SetBrowser(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldBrowser, v)
	return u
}

// UpdateBrowser sets the "browser" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateBrowser() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldBrowser)
	return u
}

// SetBrowserVer sets the "browser_ver" field.
func (u *LoginRecordUpsert) SetBrowserVer(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldBrowserVer, v)
	return u
}

// UpdateBrowserVer sets the "browser_ver" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateBrowserVer() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldBrowserVer)
	return u
}

// SetIP sets the "ip" field.
func (u *LoginRecordUpsert) SetIP(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateIP() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldIP)
	return u
}

// SetOs sets the "os" field.
func (u *LoginRecordUpsert) SetOs(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldOs, v)
	return u
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateOs() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldOs)
	return u
}

// SetPlatform sets the "platform" field.
func (u *LoginRecordUpsert) SetPlatform(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdatePlatform() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldPlatform)
	return u
}

// SetCountry sets the "country" field.
func (u *LoginRecordUpsert) SetCountry(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateCountry() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldCountry)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *LoginRecordUpsert) SetCountryCode(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateCountryCode() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldCountryCode)
	return u
}

// SetCity sets the "city" field.
func (u *LoginRecordUpsert) SetCity(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateCity() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldCity)
	return u
}

// SetAsp sets the "asp" field.
func (u *LoginRecordUpsert) SetAsp(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldAsp, v)
	return u
}

// UpdateAsp sets the "asp" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateAsp() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldAsp)
	return u
}

// SetIsMobile sets the "is_mobile" field.
func (u *LoginRecordUpsert) SetIsMobile(v bool) *LoginRecordUpsert {
	u.Set(loginrecord.FieldIsMobile, v)
	return u
}

// UpdateIsMobile sets the "is_mobile" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateIsMobile() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldIsMobile)
	return u
}

// SetIsSuccess sets the "is_success" field.
func (u *LoginRecordUpsert) SetIsSuccess(v bool) *LoginRecordUpsert {
	u.Set(loginrecord.FieldIsSuccess, v)
	return u
}

// UpdateIsSuccess sets the "is_success" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateIsSuccess() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldIsSuccess)
	return u
}

// SetErrMessage sets the "err_message" field.
func (u *LoginRecordUpsert) SetErrMessage(v string) *LoginRecordUpsert {
	u.Set(loginrecord.FieldErrMessage, v)
	return u
}

// UpdateErrMessage sets the "err_message" field to the value that was provided on create.
func (u *LoginRecordUpsert) UpdateErrMessage() *LoginRecordUpsert {
	u.SetExcluded(loginrecord.FieldErrMessage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(loginrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LoginRecordUpsertOne) UpdateNewValues() *LoginRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(loginrecord.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(loginrecord.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LoginRecordUpsertOne) Ignore() *LoginRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginRecordUpsertOne) DoNothing() *LoginRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginRecordCreate.OnConflict
// documentation for more info.
func (u *LoginRecordUpsertOne) Update(set func(*LoginRecordUpsert)) *LoginRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LoginRecordUpsertOne) SetUpdatedAt(v time.Time) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateUpdatedAt() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBrowser sets the "browser" field.
func (u *LoginRecordUpsertOne) SetBrowser(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetBrowser(v)
	})
}

// UpdateBrowser sets the "browser" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateBrowser() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateBrowser()
	})
}

// SetBrowserVer sets the "browser_ver" field.
func (u *LoginRecordUpsertOne) SetBrowserVer(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetBrowserVer(v)
	})
}

// UpdateBrowserVer sets the "browser_ver" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateBrowserVer() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateBrowserVer()
	})
}

// SetIP sets the "ip" field.
func (u *LoginRecordUpsertOne) SetIP(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateIP() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateIP()
	})
}

// SetOs sets the "os" field.
func (u *LoginRecordUpsertOne) SetOs(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateOs() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateOs()
	})
}

// SetPlatform sets the "platform" field.
func (u *LoginRecordUpsertOne) SetPlatform(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdatePlatform() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdatePlatform()
	})
}

// SetCountry sets the "country" field.
func (u *LoginRecordUpsertOne) SetCountry(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateCountry() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateCountry()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *LoginRecordUpsertOne) SetCountryCode(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateCountryCode() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateCountryCode()
	})
}

// SetCity sets the "city" field.
func (u *LoginRecordUpsertOne) SetCity(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateCity() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateCity()
	})
}

// SetAsp sets the "asp" field.
func (u *LoginRecordUpsertOne) SetAsp(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetAsp(v)
	})
}

// UpdateAsp sets the "asp" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateAsp() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateAsp()
	})
}

// SetIsMobile sets the "is_mobile" field.
func (u *LoginRecordUpsertOne) SetIsMobile(v bool) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetIsMobile(v)
	})
}

// UpdateIsMobile sets the "is_mobile" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateIsMobile() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateIsMobile()
	})
}

// SetIsSuccess sets the "is_success" field.
func (u *LoginRecordUpsertOne) SetIsSuccess(v bool) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetIsSuccess(v)
	})
}

// UpdateIsSuccess sets the "is_success" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateIsSuccess() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateIsSuccess()
	})
}

// SetErrMessage sets the "err_message" field.
func (u *LoginRecordUpsertOne) SetErrMessage(v string) *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetErrMessage(v)
	})
}

// UpdateErrMessage sets the "err_message" field to the value that was provided on create.
func (u *LoginRecordUpsertOne) UpdateErrMessage() *LoginRecordUpsertOne {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateErrMessage()
	})
}

// Exec executes the query.
func (u *LoginRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LoginRecordUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LoginRecordUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LoginRecordCreateBulk is the builder for creating many LoginRecord entities in bulk.
type LoginRecordCreateBulk struct {
	config
	err      error
	builders []*LoginRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the LoginRecord entities in the database.
func (lrcb *LoginRecordCreateBulk) Save(ctx context.Context) ([]*LoginRecord, error) {
	if lrcb.err != nil {
		return nil, lrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lrcb.builders))
	nodes := make([]*LoginRecord, len(lrcb.builders))
	mutators := make([]Mutator, len(lrcb.builders))
	for i := range lrcb.builders {
		func(i int, root context.Context) {
			builder := lrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrcb *LoginRecordCreateBulk) SaveX(ctx context.Context) []*LoginRecord {
	v, err := lrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrcb *LoginRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := lrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrcb *LoginRecordCreateBulk) ExecX(ctx context.Context) {
	if err := lrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginRecordUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (lrcb *LoginRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *LoginRecordUpsertBulk {
	lrcb.conflict = opts
	return &LoginRecordUpsertBulk{
		create: lrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lrcb *LoginRecordCreateBulk) OnConflictColumns(columns ...string) *LoginRecordUpsertBulk {
	lrcb.conflict = append(lrcb.conflict, sql.ConflictColumns(columns...))
	return &LoginRecordUpsertBulk{
		create: lrcb,
	}
}

// LoginRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of LoginRecord nodes.
type LoginRecordUpsertBulk struct {
	create *LoginRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(loginrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LoginRecordUpsertBulk) UpdateNewValues() *LoginRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(loginrecord.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(loginrecord.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LoginRecordUpsertBulk) Ignore() *LoginRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginRecordUpsertBulk) DoNothing() *LoginRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginRecordCreateBulk.OnConflict
// documentation for more info.
func (u *LoginRecordUpsertBulk) Update(set func(*LoginRecordUpsert)) *LoginRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LoginRecordUpsertBulk) SetUpdatedAt(v time.Time) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateUpdatedAt() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBrowser sets the "browser" field.
func (u *LoginRecordUpsertBulk) SetBrowser(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetBrowser(v)
	})
}

// UpdateBrowser sets the "browser" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateBrowser() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateBrowser()
	})
}

// SetBrowserVer sets the "browser_ver" field.
func (u *LoginRecordUpsertBulk) SetBrowserVer(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetBrowserVer(v)
	})
}

// UpdateBrowserVer sets the "browser_ver" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateBrowserVer() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateBrowserVer()
	})
}

// SetIP sets the "ip" field.
func (u *LoginRecordUpsertBulk) SetIP(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateIP() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateIP()
	})
}

// SetOs sets the "os" field.
func (u *LoginRecordUpsertBulk) SetOs(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateOs() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateOs()
	})
}

// SetPlatform sets the "platform" field.
func (u *LoginRecordUpsertBulk) SetPlatform(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdatePlatform() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdatePlatform()
	})
}

// SetCountry sets the "country" field.
func (u *LoginRecordUpsertBulk) SetCountry(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateCountry() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateCountry()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *LoginRecordUpsertBulk) SetCountryCode(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateCountryCode() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateCountryCode()
	})
}

// SetCity sets the "city" field.
func (u *LoginRecordUpsertBulk) SetCity(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateCity() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateCity()
	})
}

// SetAsp sets the "asp" field.
func (u *LoginRecordUpsertBulk) SetAsp(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetAsp(v)
	})
}

// UpdateAsp sets the "asp" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateAsp() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateAsp()
	})
}

// SetIsMobile sets the "is_mobile" field.
func (u *LoginRecordUpsertBulk) SetIsMobile(v bool) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetIsMobile(v)
	})
}

// UpdateIsMobile sets the "is_mobile" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateIsMobile() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateIsMobile()
	})
}

// SetIsSuccess sets the "is_success" field.
func (u *LoginRecordUpsertBulk) SetIsSuccess(v bool) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetIsSuccess(v)
	})
}

// UpdateIsSuccess sets the "is_success" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateIsSuccess() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateIsSuccess()
	})
}

// SetErrMessage sets the "err_message" field.
func (u *LoginRecordUpsertBulk) SetErrMessage(v string) *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.SetErrMessage(v)
	})
}

// UpdateErrMessage sets the "err_message" field to the value that was provided on create.
func (u *LoginRecordUpsertBulk) UpdateErrMessage() *LoginRecordUpsertBulk {
	return u.Update(func(s *LoginRecordUpsert) {
		s.UpdateErrMessage()
	})
}

// Exec executes the query.
func (u *LoginRecordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LoginRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
