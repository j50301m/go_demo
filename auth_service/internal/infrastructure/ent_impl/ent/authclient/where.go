// Code generated by ent, DO NOT EDIT.

package authclient

import (
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldUpdatedAt, v))
}

// ClientType applies equality check predicate on the "client_type" field. It's identical to ClientTypeEQ.
func ClientType(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldClientType, v))
}

// MerchantID applies equality check predicate on the "merchant_id" field. It's identical to MerchantIDEQ.
func MerchantID(v int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldMerchantID, v))
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldSecret, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldActive, v))
}

// TokenExpireSecs applies equality check predicate on the "token_expire_secs" field. It's identical to TokenExpireSecsEQ.
func TokenExpireSecs(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldTokenExpireSecs, v))
}

// LoginFailedTimes applies equality check predicate on the "login_failed_times" field. It's identical to LoginFailedTimesEQ.
func LoginFailedTimes(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldLoginFailedTimes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLTE(FieldUpdatedAt, v))
}

// ClientTypeEQ applies the EQ predicate on the "client_type" field.
func ClientTypeEQ(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldClientType, v))
}

// ClientTypeNEQ applies the NEQ predicate on the "client_type" field.
func ClientTypeNEQ(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNEQ(FieldClientType, v))
}

// ClientTypeIn applies the In predicate on the "client_type" field.
func ClientTypeIn(vs ...int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldIn(FieldClientType, vs...))
}

// ClientTypeNotIn applies the NotIn predicate on the "client_type" field.
func ClientTypeNotIn(vs ...int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNotIn(FieldClientType, vs...))
}

// ClientTypeGT applies the GT predicate on the "client_type" field.
func ClientTypeGT(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGT(FieldClientType, v))
}

// ClientTypeGTE applies the GTE predicate on the "client_type" field.
func ClientTypeGTE(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGTE(FieldClientType, v))
}

// ClientTypeLT applies the LT predicate on the "client_type" field.
func ClientTypeLT(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLT(FieldClientType, v))
}

// ClientTypeLTE applies the LTE predicate on the "client_type" field.
func ClientTypeLTE(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLTE(FieldClientType, v))
}

// MerchantIDEQ applies the EQ predicate on the "merchant_id" field.
func MerchantIDEQ(v int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldMerchantID, v))
}

// MerchantIDNEQ applies the NEQ predicate on the "merchant_id" field.
func MerchantIDNEQ(v int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNEQ(FieldMerchantID, v))
}

// MerchantIDIn applies the In predicate on the "merchant_id" field.
func MerchantIDIn(vs ...int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldIn(FieldMerchantID, vs...))
}

// MerchantIDNotIn applies the NotIn predicate on the "merchant_id" field.
func MerchantIDNotIn(vs ...int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNotIn(FieldMerchantID, vs...))
}

// MerchantIDGT applies the GT predicate on the "merchant_id" field.
func MerchantIDGT(v int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGT(FieldMerchantID, v))
}

// MerchantIDGTE applies the GTE predicate on the "merchant_id" field.
func MerchantIDGTE(v int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGTE(FieldMerchantID, v))
}

// MerchantIDLT applies the LT predicate on the "merchant_id" field.
func MerchantIDLT(v int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLT(FieldMerchantID, v))
}

// MerchantIDLTE applies the LTE predicate on the "merchant_id" field.
func MerchantIDLTE(v int64) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLTE(FieldMerchantID, v))
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldSecret, v))
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNEQ(FieldSecret, v))
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldIn(FieldSecret, vs...))
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNotIn(FieldSecret, vs...))
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGT(FieldSecret, v))
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGTE(FieldSecret, v))
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLT(FieldSecret, v))
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLTE(FieldSecret, v))
}

// SecretContains applies the Contains predicate on the "secret" field.
func SecretContains(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldContains(FieldSecret, v))
}

// SecretHasPrefix applies the HasPrefix predicate on the "secret" field.
func SecretHasPrefix(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldHasPrefix(FieldSecret, v))
}

// SecretHasSuffix applies the HasSuffix predicate on the "secret" field.
func SecretHasSuffix(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldHasSuffix(FieldSecret, v))
}

// SecretEqualFold applies the EqualFold predicate on the "secret" field.
func SecretEqualFold(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEqualFold(FieldSecret, v))
}

// SecretContainsFold applies the ContainsFold predicate on the "secret" field.
func SecretContainsFold(v string) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldContainsFold(FieldSecret, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNEQ(FieldActive, v))
}

// TokenExpireSecsEQ applies the EQ predicate on the "token_expire_secs" field.
func TokenExpireSecsEQ(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldTokenExpireSecs, v))
}

// TokenExpireSecsNEQ applies the NEQ predicate on the "token_expire_secs" field.
func TokenExpireSecsNEQ(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNEQ(FieldTokenExpireSecs, v))
}

// TokenExpireSecsIn applies the In predicate on the "token_expire_secs" field.
func TokenExpireSecsIn(vs ...int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldIn(FieldTokenExpireSecs, vs...))
}

// TokenExpireSecsNotIn applies the NotIn predicate on the "token_expire_secs" field.
func TokenExpireSecsNotIn(vs ...int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNotIn(FieldTokenExpireSecs, vs...))
}

// TokenExpireSecsGT applies the GT predicate on the "token_expire_secs" field.
func TokenExpireSecsGT(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGT(FieldTokenExpireSecs, v))
}

// TokenExpireSecsGTE applies the GTE predicate on the "token_expire_secs" field.
func TokenExpireSecsGTE(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGTE(FieldTokenExpireSecs, v))
}

// TokenExpireSecsLT applies the LT predicate on the "token_expire_secs" field.
func TokenExpireSecsLT(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLT(FieldTokenExpireSecs, v))
}

// TokenExpireSecsLTE applies the LTE predicate on the "token_expire_secs" field.
func TokenExpireSecsLTE(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLTE(FieldTokenExpireSecs, v))
}

// LoginFailedTimesEQ applies the EQ predicate on the "login_failed_times" field.
func LoginFailedTimesEQ(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldEQ(FieldLoginFailedTimes, v))
}

// LoginFailedTimesNEQ applies the NEQ predicate on the "login_failed_times" field.
func LoginFailedTimesNEQ(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNEQ(FieldLoginFailedTimes, v))
}

// LoginFailedTimesIn applies the In predicate on the "login_failed_times" field.
func LoginFailedTimesIn(vs ...int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldIn(FieldLoginFailedTimes, vs...))
}

// LoginFailedTimesNotIn applies the NotIn predicate on the "login_failed_times" field.
func LoginFailedTimesNotIn(vs ...int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldNotIn(FieldLoginFailedTimes, vs...))
}

// LoginFailedTimesGT applies the GT predicate on the "login_failed_times" field.
func LoginFailedTimesGT(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGT(FieldLoginFailedTimes, v))
}

// LoginFailedTimesGTE applies the GTE predicate on the "login_failed_times" field.
func LoginFailedTimesGTE(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldGTE(FieldLoginFailedTimes, v))
}

// LoginFailedTimesLT applies the LT predicate on the "login_failed_times" field.
func LoginFailedTimesLT(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLT(FieldLoginFailedTimes, v))
}

// LoginFailedTimesLTE applies the LTE predicate on the "login_failed_times" field.
func LoginFailedTimesLTE(v int) predicate.AuthClient {
	return predicate.AuthClient(sql.FieldLTE(FieldLoginFailedTimes, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.AuthClient {
	return predicate.AuthClient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.AuthClient {
	return predicate.AuthClient(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.AuthClient {
	return predicate.AuthClient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.AuthClient {
	return predicate.AuthClient(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthClient) predicate.AuthClient {
	return predicate.AuthClient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthClient) predicate.AuthClient {
	return predicate.AuthClient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthClient) predicate.AuthClient {
	return predicate.AuthClient(sql.NotPredicates(p))
}
