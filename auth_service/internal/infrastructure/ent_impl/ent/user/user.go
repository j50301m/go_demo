// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAccount holds the string denoting the account field in the database.
	FieldAccount = "account"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPasswordFailTimes holds the string denoting the password_fail_times field in the database.
	FieldPasswordFailTimes = "password_fail_times"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeAuthClients holds the string denoting the auth_clients edge name in mutations.
	EdgeAuthClients = "auth_clients"
	// EdgeLoginRecords holds the string denoting the login_records edge name in mutations.
	EdgeLoginRecords = "login_records"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AuthClientsTable is the table that holds the auth_clients relation/edge.
	AuthClientsTable = "users"
	// AuthClientsInverseTable is the table name for the AuthClient entity.
	// It exists in this package in order to avoid circular dependency with the "authclient" package.
	AuthClientsInverseTable = "auth_clients"
	// AuthClientsColumn is the table column denoting the auth_clients relation/edge.
	AuthClientsColumn = "auth_client_users"
	// LoginRecordsTable is the table that holds the login_records relation/edge.
	LoginRecordsTable = "login_records"
	// LoginRecordsInverseTable is the table name for the LoginRecord entity.
	// It exists in this package in order to avoid circular dependency with the "loginrecord" package.
	LoginRecordsInverseTable = "login_records"
	// LoginRecordsColumn is the table column denoting the login_records relation/edge.
	LoginRecordsColumn = "user_login_records"
	// RolesTable is the table that holds the roles relation/edge.
	RolesTable = "users"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// RolesColumn is the table column denoting the roles relation/edge.
	RolesColumn = "user_roles"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAccount,
	FieldPassword,
	FieldPasswordFailTimes,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"auth_client_users",
	"user_roles",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAccount orders the results by the account field.
func ByAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccount, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByPasswordFailTimes orders the results by the password_fail_times field.
func ByPasswordFailTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordFailTimes, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAuthClientsField orders the results by auth_clients field.
func ByAuthClientsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthClientsStep(), sql.OrderByField(field, opts...))
	}
}

// ByLoginRecordsCount orders the results by login_records count.
func ByLoginRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLoginRecordsStep(), opts...)
	}
}

// ByLoginRecords orders the results by login_records terms.
func ByLoginRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLoginRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolesField orders the results by roles field.
func ByRolesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthClientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthClientsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthClientsTable, AuthClientsColumn),
	)
}
func newLoginRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LoginRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LoginRecordsTable, LoginRecordsColumn),
	)
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RolesTable, RolesColumn),
	)
}
