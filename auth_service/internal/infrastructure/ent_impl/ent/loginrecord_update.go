// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/loginrecord"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/predicate"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginRecordUpdate is the builder for updating LoginRecord entities.
type LoginRecordUpdate struct {
	config
	hooks    []Hook
	mutation *LoginRecordMutation
}

// Where appends a list predicates to the LoginRecordUpdate builder.
func (lru *LoginRecordUpdate) Where(ps ...predicate.LoginRecord) *LoginRecordUpdate {
	lru.mutation.Where(ps...)
	return lru
}

// SetUpdatedAt sets the "updated_at" field.
func (lru *LoginRecordUpdate) SetUpdatedAt(t time.Time) *LoginRecordUpdate {
	lru.mutation.SetUpdatedAt(t)
	return lru
}

// SetBrowser sets the "browser" field.
func (lru *LoginRecordUpdate) SetBrowser(s string) *LoginRecordUpdate {
	lru.mutation.SetBrowser(s)
	return lru
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableBrowser(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetBrowser(*s)
	}
	return lru
}

// SetBrowserVer sets the "browser_ver" field.
func (lru *LoginRecordUpdate) SetBrowserVer(s string) *LoginRecordUpdate {
	lru.mutation.SetBrowserVer(s)
	return lru
}

// SetNillableBrowserVer sets the "browser_ver" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableBrowserVer(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetBrowserVer(*s)
	}
	return lru
}

// SetIP sets the "ip" field.
func (lru *LoginRecordUpdate) SetIP(s string) *LoginRecordUpdate {
	lru.mutation.SetIP(s)
	return lru
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableIP(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetIP(*s)
	}
	return lru
}

// SetOs sets the "os" field.
func (lru *LoginRecordUpdate) SetOs(s string) *LoginRecordUpdate {
	lru.mutation.SetOs(s)
	return lru
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableOs(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetOs(*s)
	}
	return lru
}

// SetPlatform sets the "platform" field.
func (lru *LoginRecordUpdate) SetPlatform(s string) *LoginRecordUpdate {
	lru.mutation.SetPlatform(s)
	return lru
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillablePlatform(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetPlatform(*s)
	}
	return lru
}

// SetCountry sets the "country" field.
func (lru *LoginRecordUpdate) SetCountry(s string) *LoginRecordUpdate {
	lru.mutation.SetCountry(s)
	return lru
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableCountry(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetCountry(*s)
	}
	return lru
}

// SetCountryCode sets the "country_code" field.
func (lru *LoginRecordUpdate) SetCountryCode(s string) *LoginRecordUpdate {
	lru.mutation.SetCountryCode(s)
	return lru
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableCountryCode(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetCountryCode(*s)
	}
	return lru
}

// SetCity sets the "city" field.
func (lru *LoginRecordUpdate) SetCity(s string) *LoginRecordUpdate {
	lru.mutation.SetCity(s)
	return lru
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableCity(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetCity(*s)
	}
	return lru
}

// SetAsp sets the "asp" field.
func (lru *LoginRecordUpdate) SetAsp(s string) *LoginRecordUpdate {
	lru.mutation.SetAsp(s)
	return lru
}

// SetNillableAsp sets the "asp" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableAsp(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetAsp(*s)
	}
	return lru
}

// SetIsMobile sets the "is_mobile" field.
func (lru *LoginRecordUpdate) SetIsMobile(b bool) *LoginRecordUpdate {
	lru.mutation.SetIsMobile(b)
	return lru
}

// SetNillableIsMobile sets the "is_mobile" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableIsMobile(b *bool) *LoginRecordUpdate {
	if b != nil {
		lru.SetIsMobile(*b)
	}
	return lru
}

// SetIsSuccess sets the "is_success" field.
func (lru *LoginRecordUpdate) SetIsSuccess(b bool) *LoginRecordUpdate {
	lru.mutation.SetIsSuccess(b)
	return lru
}

// SetNillableIsSuccess sets the "is_success" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableIsSuccess(b *bool) *LoginRecordUpdate {
	if b != nil {
		lru.SetIsSuccess(*b)
	}
	return lru
}

// SetErrMessage sets the "err_message" field.
func (lru *LoginRecordUpdate) SetErrMessage(s string) *LoginRecordUpdate {
	lru.mutation.SetErrMessage(s)
	return lru
}

// SetNillableErrMessage sets the "err_message" field if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableErrMessage(s *string) *LoginRecordUpdate {
	if s != nil {
		lru.SetErrMessage(*s)
	}
	return lru
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (lru *LoginRecordUpdate) SetUsersID(id int64) *LoginRecordUpdate {
	lru.mutation.SetUsersID(id)
	return lru
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (lru *LoginRecordUpdate) SetNillableUsersID(id *int64) *LoginRecordUpdate {
	if id != nil {
		lru = lru.SetUsersID(*id)
	}
	return lru
}

// SetUsers sets the "users" edge to the User entity.
func (lru *LoginRecordUpdate) SetUsers(u *User) *LoginRecordUpdate {
	return lru.SetUsersID(u.ID)
}

// Mutation returns the LoginRecordMutation object of the builder.
func (lru *LoginRecordUpdate) Mutation() *LoginRecordMutation {
	return lru.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (lru *LoginRecordUpdate) ClearUsers() *LoginRecordUpdate {
	lru.mutation.ClearUsers()
	return lru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lru *LoginRecordUpdate) Save(ctx context.Context) (int, error) {
	lru.defaults()
	return withHooks(ctx, lru.sqlSave, lru.mutation, lru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lru *LoginRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := lru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lru *LoginRecordUpdate) Exec(ctx context.Context) error {
	_, err := lru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lru *LoginRecordUpdate) ExecX(ctx context.Context) {
	if err := lru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lru *LoginRecordUpdate) defaults() {
	if _, ok := lru.mutation.UpdatedAt(); !ok {
		v := loginrecord.UpdateDefaultUpdatedAt()
		lru.mutation.SetUpdatedAt(v)
	}
}

func (lru *LoginRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(loginrecord.Table, loginrecord.Columns, sqlgraph.NewFieldSpec(loginrecord.FieldID, field.TypeInt64))
	if ps := lru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lru.mutation.UpdatedAt(); ok {
		_spec.SetField(loginrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lru.mutation.Browser(); ok {
		_spec.SetField(loginrecord.FieldBrowser, field.TypeString, value)
	}
	if value, ok := lru.mutation.BrowserVer(); ok {
		_spec.SetField(loginrecord.FieldBrowserVer, field.TypeString, value)
	}
	if value, ok := lru.mutation.IP(); ok {
		_spec.SetField(loginrecord.FieldIP, field.TypeString, value)
	}
	if value, ok := lru.mutation.Os(); ok {
		_spec.SetField(loginrecord.FieldOs, field.TypeString, value)
	}
	if value, ok := lru.mutation.Platform(); ok {
		_spec.SetField(loginrecord.FieldPlatform, field.TypeString, value)
	}
	if value, ok := lru.mutation.Country(); ok {
		_spec.SetField(loginrecord.FieldCountry, field.TypeString, value)
	}
	if value, ok := lru.mutation.CountryCode(); ok {
		_spec.SetField(loginrecord.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := lru.mutation.City(); ok {
		_spec.SetField(loginrecord.FieldCity, field.TypeString, value)
	}
	if value, ok := lru.mutation.Asp(); ok {
		_spec.SetField(loginrecord.FieldAsp, field.TypeString, value)
	}
	if value, ok := lru.mutation.IsMobile(); ok {
		_spec.SetField(loginrecord.FieldIsMobile, field.TypeBool, value)
	}
	if value, ok := lru.mutation.IsSuccess(); ok {
		_spec.SetField(loginrecord.FieldIsSuccess, field.TypeBool, value)
	}
	if value, ok := lru.mutation.ErrMessage(); ok {
		_spec.SetField(loginrecord.FieldErrMessage, field.TypeString, value)
	}
	if lru.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UsersTable,
			Columns: []string{loginrecord.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UsersTable,
			Columns: []string{loginrecord.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lru.mutation.done = true
	return n, nil
}

// LoginRecordUpdateOne is the builder for updating a single LoginRecord entity.
type LoginRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginRecordMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lruo *LoginRecordUpdateOne) SetUpdatedAt(t time.Time) *LoginRecordUpdateOne {
	lruo.mutation.SetUpdatedAt(t)
	return lruo
}

// SetBrowser sets the "browser" field.
func (lruo *LoginRecordUpdateOne) SetBrowser(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetBrowser(s)
	return lruo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableBrowser(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetBrowser(*s)
	}
	return lruo
}

// SetBrowserVer sets the "browser_ver" field.
func (lruo *LoginRecordUpdateOne) SetBrowserVer(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetBrowserVer(s)
	return lruo
}

// SetNillableBrowserVer sets the "browser_ver" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableBrowserVer(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetBrowserVer(*s)
	}
	return lruo
}

// SetIP sets the "ip" field.
func (lruo *LoginRecordUpdateOne) SetIP(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetIP(s)
	return lruo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableIP(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetIP(*s)
	}
	return lruo
}

// SetOs sets the "os" field.
func (lruo *LoginRecordUpdateOne) SetOs(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetOs(s)
	return lruo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableOs(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetOs(*s)
	}
	return lruo
}

// SetPlatform sets the "platform" field.
func (lruo *LoginRecordUpdateOne) SetPlatform(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetPlatform(s)
	return lruo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillablePlatform(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetPlatform(*s)
	}
	return lruo
}

// SetCountry sets the "country" field.
func (lruo *LoginRecordUpdateOne) SetCountry(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetCountry(s)
	return lruo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableCountry(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetCountry(*s)
	}
	return lruo
}

// SetCountryCode sets the "country_code" field.
func (lruo *LoginRecordUpdateOne) SetCountryCode(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetCountryCode(s)
	return lruo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableCountryCode(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetCountryCode(*s)
	}
	return lruo
}

// SetCity sets the "city" field.
func (lruo *LoginRecordUpdateOne) SetCity(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetCity(s)
	return lruo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableCity(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetCity(*s)
	}
	return lruo
}

// SetAsp sets the "asp" field.
func (lruo *LoginRecordUpdateOne) SetAsp(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetAsp(s)
	return lruo
}

// SetNillableAsp sets the "asp" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableAsp(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetAsp(*s)
	}
	return lruo
}

// SetIsMobile sets the "is_mobile" field.
func (lruo *LoginRecordUpdateOne) SetIsMobile(b bool) *LoginRecordUpdateOne {
	lruo.mutation.SetIsMobile(b)
	return lruo
}

// SetNillableIsMobile sets the "is_mobile" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableIsMobile(b *bool) *LoginRecordUpdateOne {
	if b != nil {
		lruo.SetIsMobile(*b)
	}
	return lruo
}

// SetIsSuccess sets the "is_success" field.
func (lruo *LoginRecordUpdateOne) SetIsSuccess(b bool) *LoginRecordUpdateOne {
	lruo.mutation.SetIsSuccess(b)
	return lruo
}

// SetNillableIsSuccess sets the "is_success" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableIsSuccess(b *bool) *LoginRecordUpdateOne {
	if b != nil {
		lruo.SetIsSuccess(*b)
	}
	return lruo
}

// SetErrMessage sets the "err_message" field.
func (lruo *LoginRecordUpdateOne) SetErrMessage(s string) *LoginRecordUpdateOne {
	lruo.mutation.SetErrMessage(s)
	return lruo
}

// SetNillableErrMessage sets the "err_message" field if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableErrMessage(s *string) *LoginRecordUpdateOne {
	if s != nil {
		lruo.SetErrMessage(*s)
	}
	return lruo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (lruo *LoginRecordUpdateOne) SetUsersID(id int64) *LoginRecordUpdateOne {
	lruo.mutation.SetUsersID(id)
	return lruo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (lruo *LoginRecordUpdateOne) SetNillableUsersID(id *int64) *LoginRecordUpdateOne {
	if id != nil {
		lruo = lruo.SetUsersID(*id)
	}
	return lruo
}

// SetUsers sets the "users" edge to the User entity.
func (lruo *LoginRecordUpdateOne) SetUsers(u *User) *LoginRecordUpdateOne {
	return lruo.SetUsersID(u.ID)
}

// Mutation returns the LoginRecordMutation object of the builder.
func (lruo *LoginRecordUpdateOne) Mutation() *LoginRecordMutation {
	return lruo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (lruo *LoginRecordUpdateOne) ClearUsers() *LoginRecordUpdateOne {
	lruo.mutation.ClearUsers()
	return lruo
}

// Where appends a list predicates to the LoginRecordUpdate builder.
func (lruo *LoginRecordUpdateOne) Where(ps ...predicate.LoginRecord) *LoginRecordUpdateOne {
	lruo.mutation.Where(ps...)
	return lruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lruo *LoginRecordUpdateOne) Select(field string, fields ...string) *LoginRecordUpdateOne {
	lruo.fields = append([]string{field}, fields...)
	return lruo
}

// Save executes the query and returns the updated LoginRecord entity.
func (lruo *LoginRecordUpdateOne) Save(ctx context.Context) (*LoginRecord, error) {
	lruo.defaults()
	return withHooks(ctx, lruo.sqlSave, lruo.mutation, lruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lruo *LoginRecordUpdateOne) SaveX(ctx context.Context) *LoginRecord {
	node, err := lruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lruo *LoginRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := lruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lruo *LoginRecordUpdateOne) ExecX(ctx context.Context) {
	if err := lruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lruo *LoginRecordUpdateOne) defaults() {
	if _, ok := lruo.mutation.UpdatedAt(); !ok {
		v := loginrecord.UpdateDefaultUpdatedAt()
		lruo.mutation.SetUpdatedAt(v)
	}
}

func (lruo *LoginRecordUpdateOne) sqlSave(ctx context.Context) (_node *LoginRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(loginrecord.Table, loginrecord.Columns, sqlgraph.NewFieldSpec(loginrecord.FieldID, field.TypeInt64))
	id, ok := lruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginrecord.FieldID)
		for _, f := range fields {
			if !loginrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lruo.mutation.UpdatedAt(); ok {
		_spec.SetField(loginrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lruo.mutation.Browser(); ok {
		_spec.SetField(loginrecord.FieldBrowser, field.TypeString, value)
	}
	if value, ok := lruo.mutation.BrowserVer(); ok {
		_spec.SetField(loginrecord.FieldBrowserVer, field.TypeString, value)
	}
	if value, ok := lruo.mutation.IP(); ok {
		_spec.SetField(loginrecord.FieldIP, field.TypeString, value)
	}
	if value, ok := lruo.mutation.Os(); ok {
		_spec.SetField(loginrecord.FieldOs, field.TypeString, value)
	}
	if value, ok := lruo.mutation.Platform(); ok {
		_spec.SetField(loginrecord.FieldPlatform, field.TypeString, value)
	}
	if value, ok := lruo.mutation.Country(); ok {
		_spec.SetField(loginrecord.FieldCountry, field.TypeString, value)
	}
	if value, ok := lruo.mutation.CountryCode(); ok {
		_spec.SetField(loginrecord.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := lruo.mutation.City(); ok {
		_spec.SetField(loginrecord.FieldCity, field.TypeString, value)
	}
	if value, ok := lruo.mutation.Asp(); ok {
		_spec.SetField(loginrecord.FieldAsp, field.TypeString, value)
	}
	if value, ok := lruo.mutation.IsMobile(); ok {
		_spec.SetField(loginrecord.FieldIsMobile, field.TypeBool, value)
	}
	if value, ok := lruo.mutation.IsSuccess(); ok {
		_spec.SetField(loginrecord.FieldIsSuccess, field.TypeBool, value)
	}
	if value, ok := lruo.mutation.ErrMessage(); ok {
		_spec.SetField(loginrecord.FieldErrMessage, field.TypeString, value)
	}
	if lruo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UsersTable,
			Columns: []string{loginrecord.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginrecord.UsersTable,
			Columns: []string{loginrecord.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LoginRecord{config: lruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lruo.mutation.done = true
	return _node, nil
}
