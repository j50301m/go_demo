// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthClientsColumns holds the columns for the "auth_clients" table.
	AuthClientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "client_type", Type: field.TypeInt},
		{Name: "merchant_id", Type: field.TypeInt64},
		{Name: "secret", Type: field.TypeString},
		{Name: "active", Type: field.TypeBool},
		{Name: "token_expire_secs", Type: field.TypeInt},
		{Name: "login_failed_times", Type: field.TypeInt},
	}
	// AuthClientsTable holds the schema information for the "auth_clients" table.
	AuthClientsTable = &schema.Table{
		Name:       "auth_clients",
		Columns:    AuthClientsColumns,
		PrimaryKey: []*schema.Column{AuthClientsColumns[0]},
	}
	// LoginRecordsColumns holds the columns for the "login_records" table.
	LoginRecordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "browser", Type: field.TypeString},
		{Name: "browser_ver", Type: field.TypeString},
		{Name: "ip", Type: field.TypeString},
		{Name: "os", Type: field.TypeString},
		{Name: "platform", Type: field.TypeString},
		{Name: "country", Type: field.TypeString},
		{Name: "country_code", Type: field.TypeString},
		{Name: "city", Type: field.TypeString},
		{Name: "asp", Type: field.TypeString},
		{Name: "is_mobile", Type: field.TypeBool},
		{Name: "is_success", Type: field.TypeBool},
		{Name: "err_message", Type: field.TypeString},
		{Name: "user_login_records", Type: field.TypeInt64, Nullable: true},
	}
	// LoginRecordsTable holds the schema information for the "login_records" table.
	LoginRecordsTable = &schema.Table{
		Name:       "login_records",
		Columns:    LoginRecordsColumns,
		PrimaryKey: []*schema.Column{LoginRecordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "login_records_users_login_records",
				Columns:    []*schema.Column{LoginRecordsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "permissions", Type: field.TypeJSON},
		{Name: "is_system", Type: field.TypeBool, Default: false},
		{Name: "client_type", Type: field.TypeInt},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "account", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "password_fail_times", Type: field.TypeInt},
		{Name: "status", Type: field.TypeInt},
		{Name: "auth_client_users", Type: field.TypeInt64, Nullable: true},
		{Name: "user_roles", Type: field.TypeInt64, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_auth_clients_users",
				Columns:    []*schema.Column{UsersColumns[7]},
				RefColumns: []*schema.Column{AuthClientsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_roles_roles",
				Columns:    []*schema.Column{UsersColumns[8]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AuthClientRolesColumns holds the columns for the "auth_client_roles" table.
	AuthClientRolesColumns = []*schema.Column{
		{Name: "auth_client_id", Type: field.TypeInt64},
		{Name: "role_id", Type: field.TypeInt64},
	}
	// AuthClientRolesTable holds the schema information for the "auth_client_roles" table.
	AuthClientRolesTable = &schema.Table{
		Name:       "auth_client_roles",
		Columns:    AuthClientRolesColumns,
		PrimaryKey: []*schema.Column{AuthClientRolesColumns[0], AuthClientRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auth_client_roles_auth_client_id",
				Columns:    []*schema.Column{AuthClientRolesColumns[0]},
				RefColumns: []*schema.Column{AuthClientsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "auth_client_roles_role_id",
				Columns:    []*schema.Column{AuthClientRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthClientsTable,
		LoginRecordsTable,
		RolesTable,
		UsersTable,
		AuthClientRolesTable,
	}
)

func init() {
	LoginRecordsTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = AuthClientsTable
	UsersTable.ForeignKeys[1].RefTable = RolesTable
	AuthClientRolesTable.ForeignKeys[0].RefTable = AuthClientsTable
	AuthClientRolesTable.ForeignKeys[1].RefTable = RolesTable
}
