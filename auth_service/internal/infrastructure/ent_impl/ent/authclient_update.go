// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/authclient"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/predicate"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/role"
	"hype-casino-platform/auth_service/internal/infrastructure/ent_impl/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthClientUpdate is the builder for updating AuthClient entities.
type AuthClientUpdate struct {
	config
	hooks    []Hook
	mutation *AuthClientMutation
}

// Where appends a list predicates to the AuthClientUpdate builder.
func (acu *AuthClientUpdate) Where(ps ...predicate.AuthClient) *AuthClientUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AuthClientUpdate) SetUpdatedAt(t time.Time) *AuthClientUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetClientType sets the "client_type" field.
func (acu *AuthClientUpdate) SetClientType(i int) *AuthClientUpdate {
	acu.mutation.ResetClientType()
	acu.mutation.SetClientType(i)
	return acu
}

// SetNillableClientType sets the "client_type" field if the given value is not nil.
func (acu *AuthClientUpdate) SetNillableClientType(i *int) *AuthClientUpdate {
	if i != nil {
		acu.SetClientType(*i)
	}
	return acu
}

// AddClientType adds i to the "client_type" field.
func (acu *AuthClientUpdate) AddClientType(i int) *AuthClientUpdate {
	acu.mutation.AddClientType(i)
	return acu
}

// SetMerchantID sets the "merchant_id" field.
func (acu *AuthClientUpdate) SetMerchantID(i int64) *AuthClientUpdate {
	acu.mutation.ResetMerchantID()
	acu.mutation.SetMerchantID(i)
	return acu
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (acu *AuthClientUpdate) SetNillableMerchantID(i *int64) *AuthClientUpdate {
	if i != nil {
		acu.SetMerchantID(*i)
	}
	return acu
}

// AddMerchantID adds i to the "merchant_id" field.
func (acu *AuthClientUpdate) AddMerchantID(i int64) *AuthClientUpdate {
	acu.mutation.AddMerchantID(i)
	return acu
}

// SetSecret sets the "secret" field.
func (acu *AuthClientUpdate) SetSecret(s string) *AuthClientUpdate {
	acu.mutation.SetSecret(s)
	return acu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (acu *AuthClientUpdate) SetNillableSecret(s *string) *AuthClientUpdate {
	if s != nil {
		acu.SetSecret(*s)
	}
	return acu
}

// SetActive sets the "active" field.
func (acu *AuthClientUpdate) SetActive(b bool) *AuthClientUpdate {
	acu.mutation.SetActive(b)
	return acu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (acu *AuthClientUpdate) SetNillableActive(b *bool) *AuthClientUpdate {
	if b != nil {
		acu.SetActive(*b)
	}
	return acu
}

// SetTokenExpireSecs sets the "token_expire_secs" field.
func (acu *AuthClientUpdate) SetTokenExpireSecs(i int) *AuthClientUpdate {
	acu.mutation.ResetTokenExpireSecs()
	acu.mutation.SetTokenExpireSecs(i)
	return acu
}

// SetNillableTokenExpireSecs sets the "token_expire_secs" field if the given value is not nil.
func (acu *AuthClientUpdate) SetNillableTokenExpireSecs(i *int) *AuthClientUpdate {
	if i != nil {
		acu.SetTokenExpireSecs(*i)
	}
	return acu
}

// AddTokenExpireSecs adds i to the "token_expire_secs" field.
func (acu *AuthClientUpdate) AddTokenExpireSecs(i int) *AuthClientUpdate {
	acu.mutation.AddTokenExpireSecs(i)
	return acu
}

// SetLoginFailedTimes sets the "login_failed_times" field.
func (acu *AuthClientUpdate) SetLoginFailedTimes(i int) *AuthClientUpdate {
	acu.mutation.ResetLoginFailedTimes()
	acu.mutation.SetLoginFailedTimes(i)
	return acu
}

// SetNillableLoginFailedTimes sets the "login_failed_times" field if the given value is not nil.
func (acu *AuthClientUpdate) SetNillableLoginFailedTimes(i *int) *AuthClientUpdate {
	if i != nil {
		acu.SetLoginFailedTimes(*i)
	}
	return acu
}

// AddLoginFailedTimes adds i to the "login_failed_times" field.
func (acu *AuthClientUpdate) AddLoginFailedTimes(i int) *AuthClientUpdate {
	acu.mutation.AddLoginFailedTimes(i)
	return acu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (acu *AuthClientUpdate) AddUserIDs(ids ...int64) *AuthClientUpdate {
	acu.mutation.AddUserIDs(ids...)
	return acu
}

// AddUsers adds the "users" edges to the User entity.
func (acu *AuthClientUpdate) AddUsers(u ...*User) *AuthClientUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return acu.AddUserIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (acu *AuthClientUpdate) AddRoleIDs(ids ...int64) *AuthClientUpdate {
	acu.mutation.AddRoleIDs(ids...)
	return acu
}

// AddRoles adds the "roles" edges to the Role entity.
func (acu *AuthClientUpdate) AddRoles(r ...*Role) *AuthClientUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return acu.AddRoleIDs(ids...)
}

// Mutation returns the AuthClientMutation object of the builder.
func (acu *AuthClientUpdate) Mutation() *AuthClientMutation {
	return acu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (acu *AuthClientUpdate) ClearUsers() *AuthClientUpdate {
	acu.mutation.ClearUsers()
	return acu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (acu *AuthClientUpdate) RemoveUserIDs(ids ...int64) *AuthClientUpdate {
	acu.mutation.RemoveUserIDs(ids...)
	return acu
}

// RemoveUsers removes "users" edges to User entities.
func (acu *AuthClientUpdate) RemoveUsers(u ...*User) *AuthClientUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return acu.RemoveUserIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (acu *AuthClientUpdate) ClearRoles() *AuthClientUpdate {
	acu.mutation.ClearRoles()
	return acu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (acu *AuthClientUpdate) RemoveRoleIDs(ids ...int64) *AuthClientUpdate {
	acu.mutation.RemoveRoleIDs(ids...)
	return acu
}

// RemoveRoles removes "roles" edges to Role entities.
func (acu *AuthClientUpdate) RemoveRoles(r ...*Role) *AuthClientUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return acu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AuthClientUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AuthClientUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AuthClientUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AuthClientUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AuthClientUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := authclient.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

func (acu *AuthClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authclient.Table, authclient.Columns, sqlgraph.NewFieldSpec(authclient.FieldID, field.TypeInt64))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(authclient.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.ClientType(); ok {
		_spec.SetField(authclient.FieldClientType, field.TypeInt, value)
	}
	if value, ok := acu.mutation.AddedClientType(); ok {
		_spec.AddField(authclient.FieldClientType, field.TypeInt, value)
	}
	if value, ok := acu.mutation.MerchantID(); ok {
		_spec.SetField(authclient.FieldMerchantID, field.TypeInt64, value)
	}
	if value, ok := acu.mutation.AddedMerchantID(); ok {
		_spec.AddField(authclient.FieldMerchantID, field.TypeInt64, value)
	}
	if value, ok := acu.mutation.Secret(); ok {
		_spec.SetField(authclient.FieldSecret, field.TypeString, value)
	}
	if value, ok := acu.mutation.Active(); ok {
		_spec.SetField(authclient.FieldActive, field.TypeBool, value)
	}
	if value, ok := acu.mutation.TokenExpireSecs(); ok {
		_spec.SetField(authclient.FieldTokenExpireSecs, field.TypeInt, value)
	}
	if value, ok := acu.mutation.AddedTokenExpireSecs(); ok {
		_spec.AddField(authclient.FieldTokenExpireSecs, field.TypeInt, value)
	}
	if value, ok := acu.mutation.LoginFailedTimes(); ok {
		_spec.SetField(authclient.FieldLoginFailedTimes, field.TypeInt, value)
	}
	if value, ok := acu.mutation.AddedLoginFailedTimes(); ok {
		_spec.AddField(authclient.FieldLoginFailedTimes, field.TypeInt, value)
	}
	if acu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.UsersTable,
			Columns: []string{authclient.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !acu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.UsersTable,
			Columns: []string{authclient.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.UsersTable,
			Columns: []string{authclient.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authclient.RolesTable,
			Columns: authclient.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !acu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authclient.RolesTable,
			Columns: authclient.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authclient.RolesTable,
			Columns: authclient.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AuthClientUpdateOne is the builder for updating a single AuthClient entity.
type AuthClientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthClientMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AuthClientUpdateOne) SetUpdatedAt(t time.Time) *AuthClientUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetClientType sets the "client_type" field.
func (acuo *AuthClientUpdateOne) SetClientType(i int) *AuthClientUpdateOne {
	acuo.mutation.ResetClientType()
	acuo.mutation.SetClientType(i)
	return acuo
}

// SetNillableClientType sets the "client_type" field if the given value is not nil.
func (acuo *AuthClientUpdateOne) SetNillableClientType(i *int) *AuthClientUpdateOne {
	if i != nil {
		acuo.SetClientType(*i)
	}
	return acuo
}

// AddClientType adds i to the "client_type" field.
func (acuo *AuthClientUpdateOne) AddClientType(i int) *AuthClientUpdateOne {
	acuo.mutation.AddClientType(i)
	return acuo
}

// SetMerchantID sets the "merchant_id" field.
func (acuo *AuthClientUpdateOne) SetMerchantID(i int64) *AuthClientUpdateOne {
	acuo.mutation.ResetMerchantID()
	acuo.mutation.SetMerchantID(i)
	return acuo
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (acuo *AuthClientUpdateOne) SetNillableMerchantID(i *int64) *AuthClientUpdateOne {
	if i != nil {
		acuo.SetMerchantID(*i)
	}
	return acuo
}

// AddMerchantID adds i to the "merchant_id" field.
func (acuo *AuthClientUpdateOne) AddMerchantID(i int64) *AuthClientUpdateOne {
	acuo.mutation.AddMerchantID(i)
	return acuo
}

// SetSecret sets the "secret" field.
func (acuo *AuthClientUpdateOne) SetSecret(s string) *AuthClientUpdateOne {
	acuo.mutation.SetSecret(s)
	return acuo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (acuo *AuthClientUpdateOne) SetNillableSecret(s *string) *AuthClientUpdateOne {
	if s != nil {
		acuo.SetSecret(*s)
	}
	return acuo
}

// SetActive sets the "active" field.
func (acuo *AuthClientUpdateOne) SetActive(b bool) *AuthClientUpdateOne {
	acuo.mutation.SetActive(b)
	return acuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (acuo *AuthClientUpdateOne) SetNillableActive(b *bool) *AuthClientUpdateOne {
	if b != nil {
		acuo.SetActive(*b)
	}
	return acuo
}

// SetTokenExpireSecs sets the "token_expire_secs" field.
func (acuo *AuthClientUpdateOne) SetTokenExpireSecs(i int) *AuthClientUpdateOne {
	acuo.mutation.ResetTokenExpireSecs()
	acuo.mutation.SetTokenExpireSecs(i)
	return acuo
}

// SetNillableTokenExpireSecs sets the "token_expire_secs" field if the given value is not nil.
func (acuo *AuthClientUpdateOne) SetNillableTokenExpireSecs(i *int) *AuthClientUpdateOne {
	if i != nil {
		acuo.SetTokenExpireSecs(*i)
	}
	return acuo
}

// AddTokenExpireSecs adds i to the "token_expire_secs" field.
func (acuo *AuthClientUpdateOne) AddTokenExpireSecs(i int) *AuthClientUpdateOne {
	acuo.mutation.AddTokenExpireSecs(i)
	return acuo
}

// SetLoginFailedTimes sets the "login_failed_times" field.
func (acuo *AuthClientUpdateOne) SetLoginFailedTimes(i int) *AuthClientUpdateOne {
	acuo.mutation.ResetLoginFailedTimes()
	acuo.mutation.SetLoginFailedTimes(i)
	return acuo
}

// SetNillableLoginFailedTimes sets the "login_failed_times" field if the given value is not nil.
func (acuo *AuthClientUpdateOne) SetNillableLoginFailedTimes(i *int) *AuthClientUpdateOne {
	if i != nil {
		acuo.SetLoginFailedTimes(*i)
	}
	return acuo
}

// AddLoginFailedTimes adds i to the "login_failed_times" field.
func (acuo *AuthClientUpdateOne) AddLoginFailedTimes(i int) *AuthClientUpdateOne {
	acuo.mutation.AddLoginFailedTimes(i)
	return acuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (acuo *AuthClientUpdateOne) AddUserIDs(ids ...int64) *AuthClientUpdateOne {
	acuo.mutation.AddUserIDs(ids...)
	return acuo
}

// AddUsers adds the "users" edges to the User entity.
func (acuo *AuthClientUpdateOne) AddUsers(u ...*User) *AuthClientUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return acuo.AddUserIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (acuo *AuthClientUpdateOne) AddRoleIDs(ids ...int64) *AuthClientUpdateOne {
	acuo.mutation.AddRoleIDs(ids...)
	return acuo
}

// AddRoles adds the "roles" edges to the Role entity.
func (acuo *AuthClientUpdateOne) AddRoles(r ...*Role) *AuthClientUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return acuo.AddRoleIDs(ids...)
}

// Mutation returns the AuthClientMutation object of the builder.
func (acuo *AuthClientUpdateOne) Mutation() *AuthClientMutation {
	return acuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (acuo *AuthClientUpdateOne) ClearUsers() *AuthClientUpdateOne {
	acuo.mutation.ClearUsers()
	return acuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (acuo *AuthClientUpdateOne) RemoveUserIDs(ids ...int64) *AuthClientUpdateOne {
	acuo.mutation.RemoveUserIDs(ids...)
	return acuo
}

// RemoveUsers removes "users" edges to User entities.
func (acuo *AuthClientUpdateOne) RemoveUsers(u ...*User) *AuthClientUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return acuo.RemoveUserIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (acuo *AuthClientUpdateOne) ClearRoles() *AuthClientUpdateOne {
	acuo.mutation.ClearRoles()
	return acuo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (acuo *AuthClientUpdateOne) RemoveRoleIDs(ids ...int64) *AuthClientUpdateOne {
	acuo.mutation.RemoveRoleIDs(ids...)
	return acuo
}

// RemoveRoles removes "roles" edges to Role entities.
func (acuo *AuthClientUpdateOne) RemoveRoles(r ...*Role) *AuthClientUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return acuo.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the AuthClientUpdate builder.
func (acuo *AuthClientUpdateOne) Where(ps ...predicate.AuthClient) *AuthClientUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AuthClientUpdateOne) Select(field string, fields ...string) *AuthClientUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AuthClient entity.
func (acuo *AuthClientUpdateOne) Save(ctx context.Context) (*AuthClient, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AuthClientUpdateOne) SaveX(ctx context.Context) *AuthClient {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AuthClientUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AuthClientUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AuthClientUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := authclient.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

func (acuo *AuthClientUpdateOne) sqlSave(ctx context.Context) (_node *AuthClient, err error) {
	_spec := sqlgraph.NewUpdateSpec(authclient.Table, authclient.Columns, sqlgraph.NewFieldSpec(authclient.FieldID, field.TypeInt64))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthClient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authclient.FieldID)
		for _, f := range fields {
			if !authclient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(authclient.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.ClientType(); ok {
		_spec.SetField(authclient.FieldClientType, field.TypeInt, value)
	}
	if value, ok := acuo.mutation.AddedClientType(); ok {
		_spec.AddField(authclient.FieldClientType, field.TypeInt, value)
	}
	if value, ok := acuo.mutation.MerchantID(); ok {
		_spec.SetField(authclient.FieldMerchantID, field.TypeInt64, value)
	}
	if value, ok := acuo.mutation.AddedMerchantID(); ok {
		_spec.AddField(authclient.FieldMerchantID, field.TypeInt64, value)
	}
	if value, ok := acuo.mutation.Secret(); ok {
		_spec.SetField(authclient.FieldSecret, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Active(); ok {
		_spec.SetField(authclient.FieldActive, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.TokenExpireSecs(); ok {
		_spec.SetField(authclient.FieldTokenExpireSecs, field.TypeInt, value)
	}
	if value, ok := acuo.mutation.AddedTokenExpireSecs(); ok {
		_spec.AddField(authclient.FieldTokenExpireSecs, field.TypeInt, value)
	}
	if value, ok := acuo.mutation.LoginFailedTimes(); ok {
		_spec.SetField(authclient.FieldLoginFailedTimes, field.TypeInt, value)
	}
	if value, ok := acuo.mutation.AddedLoginFailedTimes(); ok {
		_spec.AddField(authclient.FieldLoginFailedTimes, field.TypeInt, value)
	}
	if acuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.UsersTable,
			Columns: []string{authclient.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !acuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.UsersTable,
			Columns: []string{authclient.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authclient.UsersTable,
			Columns: []string{authclient.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authclient.RolesTable,
			Columns: authclient.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !acuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authclient.RolesTable,
			Columns: authclient.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   authclient.RolesTable,
			Columns: authclient.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthClient{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
